{
  semanticCommits: 'enabled',
  extends: [
    'helpers:pinGitHubActionDigests',
  ],
  dependencyDashboard: true,
  dependencyDashboardTitle: 'Renovate Dashboard ðŸ¤–',
  suppressNotifications: [
    'prIgnoreNotification',
  ],
  commitMessageTopic: '{{depName}}',
  commitMessageExtra: 'to {{newVersion}}',
  commitMessageSuffix: 'By Renovate',
  rebaseWhen: 'conflicted',
  prConcurrentLimit: 150,
  prHourlyLimit: 4,
  timezone: 'Europe/Amsterdam',
  pinDigests: true,
  automerge: false,
  gitAuthor: 'TrueCharts-Admin <bot@truecharts.org>',
  'helm-values': {
    fileMatch: [
      'charts/.+/.*values\\.yaml$',
      'charts/.+/SCALE/.*_values\\.yaml$',
    ],
  },
  helmv3: {
    fileMatch: [
      'charts/.+/Chart\\.yaml$',
    ],
  },
  packageRules: [
    {
      matchManagers: [
        'github-actions',
      ],
      groupName: 'Github-Actions',
      automerge: true,
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchManagers: [
        'helmv3',
      ],
      commitMessageTopic: 'Helm chart {{depName}}',
      ignorePaths: [
        'charts/unstable/**',
      ],
      autoApprove: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      enabled: true,
      pinDigests: true,
      automerge: false,
      autoApprove: true,
      separateMinorPatch: true,
      ignorePaths: [
        'charts/unstable/**',
        'charts/system/**',
      ],
      commitMessageTopic: 'container image {{depName}}',
      commitMessageExtra: 'to {{#if isSingleVersion}}v{{{newVersion}}}{{else}}{{{newValue}}}{{/if}}@{{newDigestShort}}',
    },
    {
      matchManagers: [
        'github-actions',
      ],
      labels: [
        'automerge',
      ],
      automerge: true,
      autoApprove: true,
      matchPackageNames: [
        '!stefanzweifel/git-auto-commit-action',
      ],
    },
    {
      automerge: false,
      labels: [
        'update/ignored',
      ],
      groupName: 'ignored',
      matchFileNames: [
        'charts/system/**',
        'charts/unstable/**',
        'charts/dev/**',
        'templates/app/**',
      ],
      commitMessageTopic: 'Ignored Updates',
      autoApprove: false,
    },
    {
      matchDatasources: [
        'helm',
      ],
      automerge: false,
      labels: [
        'update/helm/system',
      ],
      groupName: 'helm system',
      matchFileNames: [
        'charts/system/**',
      ],
      autoApprove: false,
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'major',
      ],
      automerge: false,
      bumpVersion: 'major',
      labels: [
        'update/helm/dependency/major',
      ],
      groupName: 'helm dependency major',
      matchFileNames: [
        'charts/dependency/**',
      ],
      autoApprove: false,
    },
    {
      matchDatasources: [
        'helm',
      ],
      automerge: true,
      matchUpdateTypes: [
        'minor',
      ],
      bumpVersion: 'minor',
      labels: [
        'update/helm/dependency/minor',
        'automerge',
      ],
      matchFileNames: [
        'charts/dependency/**',
      ],
      groupName: 'helm dependency minor',
    },
    {
      matchDatasources: [
        'helm',
      ],
      automerge: true,
      matchUpdateTypes: [
        'patch',
      ],
      bumpVersion: 'patch',
      labels: [
        'update/helm/dependency/patch',
        'automerge',
      ],
      matchFileNames: [
        'charts/dependency/**',
      ],
      groupName: 'helm dependency patch',
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'major',
      ],
      bumpVersion: 'major',
      enabled: true,
      labels: [
        'update/helm/general/major',
      ],
      automerge: false,
      groupName: 'helm general major',
      matchFileNames: [
        'charts/stable/**',
        'charts/incubator/**',
        'charts/premium/**',
        'charts/system/**',
      ],
      autoApprove: false,
    },
    {
      matchDatasources: [
        'helm',
      ],
      automerge: true,
      enabled: true,
      matchUpdateTypes: [
        'minor',
      ],
      bumpVersion: 'minor',
      labels: [
        'update/helm/general/minor',
        'automerge',
      ],
      groupName: 'helm general minor',
      matchFileNames: [
        'charts/stable/**',
        'charts/incubator/**',
        'charts/premium/**',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      automerge: true,
      enabled: true,
      matchUpdateTypes: [
        'digest',
        'patch',
        'pin',
      ],
      bumpVersion: 'patch',
      labels: [
        'update/helm/general/non-major',
        'automerge',
      ],
      groupName: 'helm general non-major',
      matchFileNames: [
        'charts/stable/**',
        'charts/incubator/**',
        'charts/premium/**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'major',
      ],
      bumpVersion: 'minor',
      enabled: true,
      labels: [
        'update/docker/general/major',
      ],
      matchFileNames: [
        'charts/dependency/**',
        'charts/stable/**',
        'charts/incubator/**',
        'charts/premium/**',
        'charts/system/**',
      ],
      autoApprove: false,
    },
    {
      matchDatasources: [
        'docker',
      ],
      automerge: true,
      matchUpdateTypes: [
        'minor',
      ],
      bumpVersion: 'minor',
      enabled: true,
      labels: [
        'update/docker/general/non-major',
        'automerge',
      ],
      matchFileNames: [
        'charts/dependency/**',
        'charts/stable/**',
        'charts/incubator/**',
        'charts/premium/**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      automerge: true,
      matchUpdateTypes: [
        'patch',
        'digest',
        'pin',
      ],
      bumpVersion: 'patch',
      enabled: true,
      labels: [
        'update/docker/general/non-major',
        'automerge',
      ],
      matchFileNames: [
        'charts/dependency/**',
        'charts/stable/**',
        'charts/incubator/**',
        'charts/premium/**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'semver',
      matchPackageNames: [
        'tccr.io/truecharts{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>14)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$',
      matchPackageNames: [
        'tccr.io/tccr/postgresql',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^v(?<major>\\d{2})(?<minor>\\d{2})(?<patch>\\d{2})$',
      matchPackageNames: [
        'photoprism',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^v(?<major>\\d{4})-(?<minor>\\d{2})$',
      matchPackageNames: [
        'rssbridge/rss-bridge',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d{2})\\.(?<minor>\\d+)\\.(?<patch>\\d+)$',
      matchPackageNames: [
        'linuxserver/heimdall',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^v(?<major>\\d+)-(?<minor>\\d+)$',
      groupName: 'jupyter',
      matchPackageNames: [
        'jupyter{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'immich',
      matchPackageNames: [
        'altran1502/immich{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'portainer',
      matchPackageNames: [
        'portainer{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'neko',
      matchPackageNames: [
        'm1k1o/neko{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'humhub',
      matchPackageNames: [
        'ghcr.io/mriedmann/humhub-{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'webtop',
      matchPackageNames: [
        'lscr.io/linuxserver/webtop{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'rdesktop',
      matchPackageNames: [
        'lscr.io/linuxserver/rdesktop{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'metallb',
      matchPackageNames: [
        'tccr.io/tccr/metallb{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'zabbix',
      matchPackageNames: [
        'zabbix/zabbix{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'vikunja',
      matchPackageNames: [
        'vikunja{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'ml-workspace',
      matchPackageNames: [
        'mltooling/ml-workspace{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'bungeecord',
      matchPackageNames: [
        'itzg/bungeecord{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'nextcloud',
      matchPackageNames: [
        'tccr.io/tccr/nextcloud-{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'minecraft-java',
      matchPackageNames: [
        'itzg/minecraft-java{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'librephotos',
      matchPackageNames: [
        'reallibrephotos/librephotos{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'kitchenowl',
      matchPackageNames: [
        'tombursch/kitchenowl{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'authentik',
      matchPackageNames: [
        'ghcr.io/goauthentik/{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'lama-cleaner',
      matchPackageNames: [
        'cwq1913/lama-cleaner{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'docspell',
      matchPackageNames: [
        'docspell/{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'restreamer',
      matchPackageNames: [
        'datarhei/restreamer{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'penpot',
      matchPackageNames: [
        'penpotapp/{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      groupName: 'ersatztv',
      matchPackageNames: [
        'jasongdove/ersatztv{/,}**',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>14)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$',
      automerge: true,
      matchPackageNames: [
        '/^bitnami/postgresql$/',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d{4})-(?<minor>\\d{2})-(?<patch>\\d{2})$',
      automerge: true,
      matchPackageNames: [
        '/^.*oznu\\/homebridge$/',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)$',
      automerge: true,
      matchPackageNames: [
        '/^jupyter\\/.+$/',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-ubuntu$',
      automerge: true,
      matchPackageNames: [
        '/^zabbix\\/zabbix-.*$/',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^stable-(?<major>\\d{1})(?<minor>\\d{1})(?<patch>\\d{2}).*$',
      groupName: 'jitsi',
      automerge: true,
      matchPackageNames: [
        '/^jitsi\\/.*$/',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^latest-(?<major>\\d{4})-(?<minor>\\d{2})-(?<patch>\\d{2})$',
      automerge: true,
      matchPackageNames: [
        '/^wangqiru/ttrss$/',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$',
      automerge: true,
      matchPackageNames: [
        '/^penpot\\/.*$/',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^\\d+-jammy-(?<compatibility>(full|lite))-v(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$',
      automerge: true,
      matchPackageNames: [
        '/^.+\\/koush\\/scrypted$/',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^version-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-.*$',
      automerge: true,
      matchPackageNames: [
        '/^.*linuxserver\\/deluge$/',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-postgres-tomcat$',
      matchPackageNames: [
        'xwiki',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^version-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$',
      matchPackageNames: [
        'fireflyiii/core',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^v(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-\\d+\\.\\d+\\.\\d+$',
      matchPackageNames: [
        'netboxcommunity/netbox',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d{2})(?<minor>\\d{2})(?<patch>\\d{2})$',
      matchPackageNames: [
        'photoprism/photoprism',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$',
      matchPackageNames: [
        'cloudflare/cloudflared',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^version-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$',
      matchPackageNames: [
        'linuxserver/calibre-web',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^postgresql-v(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$',
      matchPackageNames: [
        'ghcr.io/umami-software/umami',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^version-v(?<major>\\d+)\\.(?<minor>\\d+)\\.?(?<patch>\\d*)$',
      matchPackageNames: [
        'linuxserver/mylar3',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^[a-z0-9]{9}-v(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-go\\d+\\.\\d+\\.\\d+$',
      matchPackageNames: [
        'storjlabs/storagenode',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-php8\\.0-apache$',
      matchPackageNames: [
        'joyqi/typecho',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^v\\.(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$',
      matchPackageNames: [
        'difegue/lanraragi',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^RELEASE\\.(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)T\\d+-\\d+-\\d+Z$',
      matchPackageNames: [
        'minio/minio',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^RELEASE\\.(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)T\\d+-\\d+-\\d+Z$',
      matchPackageNames: [
        'minio/mc',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^apache-(?<major>\\d+)\\.(?<minor>\\d+)\\.?(?<patch>\\d*)-prod$',
      matchPackageNames: [
        'kimai/kimai2',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)$',
      matchPackageNames: [
        'rssbridge/rss-bridge',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)$',
      matchPackageNames: [
        'alexta69/metube',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^focal-(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)$',
      matchPackageNames: [
        'codeproject/senseai-server',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^latest-(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)$',
      matchPackageNames: [
        'wangqiru/ttrss',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)(-\\d+)?$',
      matchPackageNames: [
        'kiwix/kiwix-serve',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^v(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-omnibus$',
      matchPackageNames: [
        'ghcr.io/analogj/scrutiny',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d+)-(?<minor>\\d+)-(?<patch>\\d+)$',
      matchPackageNames: [
        'diygod/rsshub',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-amd64(nvidia)?$',
      matchPackageNames: [
        'blakeblackshear/frigate',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d{1,4})\\.(?<minor>\\d+)\\.(?<patch>\\d+)$',
      matchPackageNames: [
        'kopia/kopia',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d{4})\\.(?<minor>\\d{1,2})\\.(?<patch>\\d{1,2).*$',
      matchPackageNames: [
        'alicevision/meshroom',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d{4})\\.(?<minor>\\d{1,2})\\.(?<patch>\\d{1,2})$',
      matchPackageNames: [
        'itzg/bungeecord',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^java8-(?<major>\\d{4})\\.(?<minor>\\d{1,2})\\.(?<patch>\\d{1,2})$',
      matchPackageNames: [
        'itzg/bungeecord',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^java11-(?<major>\\d{4})\\.(?<minor>\\d{1,2})\\.(?<patch>\\d{1,2})$',
      matchPackageNames: [
        'itzg/bungeecord',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^java17-(?<major>\\d{4})\\.(?<minor>\\d{1,2})\\.(?<patch>\\d{1,2})$',
      matchPackageNames: [
        'itzg/bungeecord',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d{4})\\.(?<minor>d{1,2})\\.(?<patch>\\d{1,2})(-java\\d{1,2}.*)?$',
      matchPackageNames: [
        'itzg/minecraft-server',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d{4})(?<minor>\\d{2})(?<patch>\\d{2})$',
      matchPackageNames: [
        'ankicommunity/anki-sync-server',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d+)\\.(?<minor>\\d+)-jdk17$',
      matchPackageNames: [
        'jenkins/jenkins',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^x64-v(?<major>\\d*)\\.(?<minor>\\d*)\\.(?<patch>\\d*)$',
      matchPackageNames: [
        'housewrecker/gaps',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d*)\\.(?<minor>\\d*)\\.(?<patch>\\d*)-\\d*$',
      matchPackageNames: [
        'sameersbn/apt-cacher-ng',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^v3-3\\.(?<major>\\d*)\\.(?<minor>\\d*)\\.(?<patch>\\d*)$',
      matchPackageNames: [
        'ghcr.io/hotio/whisparr',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^release-(?<major>\\d*)\\.(?<minor>\\d*)$',
      matchPackageNames: [
        'mattermost/mattermost-premium-edition',
      ],
      automerge: true,
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'regex:^(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)-.+$',
      matchPackageNames: [
        'corentinth/it-tools',
      ],
      automerge: true,
    },
    {
      versioning: 'regex:^(?<compatibility>.*?(\\d+\\.)??)(?<major>\\d+)\\.(?<minor>\\d+)\\.?(?<patch>\\d+)?(-r?p?\\d)?$',
      matchPackageNames: [
        '/^linuxserver\\//',
        '/^deepquestai\\//',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      versioning: 'loose',
      matchPackageNames: [
        'ghcr.io/onedr0p/plex',
        'ghcr.io/onedr0p/qbittorrent',
        'sirfragalot/hyperion.ng',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchPackageNames: [
        'quay.io/helmpack/chart-releaser',
        'jnorwood/helm-docs',
        'quay.io/git-chglog/git-chglog',
      ],
      automerge: false,
      matchUpdateTypes: [
        'major',
        'minor',
        'patch',
        'digest',
        'pin',
      ],
      labels: [
        'renovate/image',
        'ci',
      ],
    },
  ],
}
